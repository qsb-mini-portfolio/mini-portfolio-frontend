stages: [build, deploy]

build:
  stage: build
  image: node:22
  script:
    - npm ci
    - npm run build -- --configuration=production
  artifacts:
    paths: [dist/]
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

stages: [build, deploy]

# --- BUILD ANGULAR ---
build:
  stage: build
  image: node:20
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  script:
    - npm ci
    # Utilise ANGULAR_CONFIGURATION si définie, sinon 'production'
    - npm run build -- --configuration=${ANGULAR_CONFIGURATION:-production}
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# --- DEPLOY TO S3 + INVALIDATE CLOUDFRONT ---
deploy:
  stage: deploy
  image: heyvaldemar/aws-kubectl:latest
  needs: ["build"]
  script:
    # Sécurité/diagnostic
    - set -euo pipefail
    - aws --version
    - aws sts get-caller-identity

    # Trouver le répertoire de build Angular (Angular 16+ peut sortir /browser/)
    - DIST_DIR="$(ls -d dist/*/browser/ dist/*/ 2>/dev/null | head -n 1)"
    - echo "DIST_DIR=${DIST_DIR}"

    # 1) Tous les assets fingerprintés => cache long (1 an, immutable)
    - aws s3 cp "${DIST_DIR}" "s3://${S3_BUCKET}/" --recursive \
        --exclude "index.html" \
        --exclude "assets/config.json" \
        --cache-control "public,max-age=31536000,immutable"

    # 2) index.html => no-cache (toujours rafraîchi)
    - aws s3 cp "${DIST_DIR}index.html" "s3://${S3_BUCKET}/index.html" \
        --cache-control "no-cache,no-store,must-revalidate" \
        --content-type "text/html"

    # 3) assets/config.json => no-cache (si présent)
    - |
      if [ -f "${DIST_DIR}assets/config.json" ]; then
        aws s3 cp "${DIST_DIR}assets/config.json" "s3://${S3_BUCKET}/assets/config.json" \
          --cache-control "no-cache" \
          --content-type "application/json";
      else
        echo "WARNING: ${DIST_DIR}assets/config.json not found";
      fi

    # 4) Invalidation ciblée CloudFront (inutile d'invalider les assets hashés)
    - aws cloudfront create-invalidation --distribution-id "${CF_DIST_ID}" --paths "/index.html" "/assets/config.json"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  environment:
    name: production
